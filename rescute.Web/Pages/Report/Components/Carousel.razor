<div id="@GetComponentId()" class="carousel slide" data-bs-interval="false">
    <div class="carousel-indicators">
        @for (int slideIndex = 0; slideIndex < GetSlideCount() + (ShouldRenderMap() ? 1 : 0); slideIndex++)
        {
            <button data-bs-target="#@GetComponentId()" data-bs-slide-to="@slideIndex" class=@ShouldBeActive(slideIndex)></button>
        }
    </div>
    <div class="carousel-inner">
        @for (int slideIndex = 0; slideIndex < GetSlideCount(); slideIndex++)
        {
            <div class="carousel-item @ShouldBeActive(slideIndex)">
                <img class="d-block w-100" src="@GetParentAsSlider().Slides[slideIndex].SlideImage" alt="@GetParentAsSlider().Slides[slideIndex].SlideTitle">
            </div>
        }
        @if (ShouldRenderMap())
        {
            <LocationMap Parent="@GetParentAsCoordinatedItem()"/>
        }

    </div>
    <a class="carousel-control-prev" href="#@GetComponentId()" data-bs-target="#@GetComponentId()"
       type="button" data-bs-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true">
            <i
                class="fa fa fa-2x fa-chevron-left">
            </i>
        </span>
        <span class="sr-only">Previous</span>
    </a>
    <a class="carousel-control-next" href="#@GetComponentId()" role="button"
       data-bs-target="#@GetComponentId()" data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true">
            <i
                class="fa fa fa-2x fa-chevron-right">
            </i>
        </span>
        <span class="sr-only">Next</span>
    </a>
</div>

@code {

    [Parameter] public required ReportItemBase Parent { get; set; }

    /// Determines whether the given slide should be initially marked as the "active" one.
    private static string ShouldBeActive(int slideIndex) => slideIndex == 0 ? "active" : "";

    private string GetComponentId() => CreateComponentId(Parent.ComponentId);
    private int GetSlideCount() => GetSlideCount(GetParentAsSlider());
    private ISliderItem GetParentAsSlider() => (ISliderItem)Parent;
    private ICoordinatedItem GetParentAsCoordinatedItem() => (ICoordinatedItem)Parent;

    private bool ShouldRenderMap() => Parent is ICoordinatedItem;

    /// Creates a component id for a carousel based on the parent's control id
    public static string CreateComponentId(string parentControlId)
    {
        return parentControlId + "-carousel";
    }

    public static int GetSlideCount(ISliderItem parent) => parent.Slides.Count;

}