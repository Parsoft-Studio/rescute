@page "/reports"
@using rescute.Web.Pages.Reports.Components
@using rescute.Web.Pages.Reports.ViewModels
@using rescute.Web.Pages.Shared.Components
@inject ReportsViewModel ViewModel;
@inject IStringLocalizer<LocalizationResources> Localizer
@rendermode InteractiveServer

@* @attribute [Authorize] *@

<HeadContent>
    <link rel="stylesheet" href="css/rescute-reports.css?v=2">
    <title>rescute</title>
</HeadContent>

<div class="container-fluid">
    @if (ViewModel.IsInitialized())
    {
        <div class="d-flex flex-wrap reports">
            @if (ViewModel.Items.Any())
            {
                @foreach (var report in ViewModel.Items)
                {
                    <ReportCard Image=@report.Image Distance=@report.Distance Timestamp=@report.Time
                                Description=@report.Description/>
                }

                <LoadMore LoadMoreClicked="@ViewModel.LoadNextPage" HasMoreItems="@ViewModel.HasMoreItems"/> 
                
            }
            else
            {
                <div class="no-reports-message">
                    @Localizer[LocalizationResources.NoReportsFound]
                </div>
            }
        </div>
    }
    <NewReportButton/>
</div>
<SectionContent SectionName="TopBarItems">
    <Checkbox @bind-Checked="@ViewModel.UsersReports" Text="@Localizer[LocalizationResources.MyReports]"/>
    <Checkbox @bind-Checked="ViewModel.UsersContributions" Text="@Localizer[LocalizationResources.MyContributions]"/>
    <Checkbox @bind-Checked="ViewModel.HasTransportRequest" Text="@Localizer[LocalizationResources.HasTransportRequest]"/>
    <Checkbox @bind-Checked="@ViewModel.HasFundraiserRequest" Text="@Localizer[LocalizationResources.HasFundraiser]"/>
</SectionContent>

@code {

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.Refresh();
    }

}
